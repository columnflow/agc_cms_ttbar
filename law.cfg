[core]

# inherit from the columnflow configuration file
inherit: $CF_BASE/law.cfg


[modules]

columnflow.tasks.cms.{external,inference}
agc.tasks


[logging]

law: INFO
luigi-interface: INFO
gfal2: WARNING
columnflow.columnar_util-perf: INFO


[analysis]

default_analysis: agc.config.analysis_agc.analysis_agc
default_config: cms_opendata_2015_agc_limited
default_dataset: tt_powheg

calibration_modules: columnflow.calibration.cms.{jets,met}, agc.calibration.default
selection_modules: columnflow.selection.cms.{json_filter, met_filters}, agc.selection.{default}
production_modules: columnflow.production.{categories,normalization,processes}, columnflow.production.cms.{btag,electron,mc_weight,muon,pdf,pileup,scale,seeds}, agc.production.{default,features,ml}
categorization_modules: agc.categorization.{default}
ml_modules: columnflow.ml
inference_modules: columnflow.inference, agc.inference.ttbar

# namespace of all columnflow tasks
cf_task_namespace: cf

# default sandbox for main tasks with standard packages for columnar processing
default_columnar_sandbox: bash::$AGC_BASE/sandboxes/venv_columnar_xgboost.sh

# wether or not the ensure_proxy decorator should be skipped, even if used by task's run methods
skip_ensure_proxy: False

# some remote workflow parameter defaults
htcondor_flavor: $CF_HTCONDOR_FLAVOR
htcondor_share_software: False
slurm_flavor: $CF_SLURM_FLAVOR
slurm_partition: $CF_SLURM_PARTITION

# ChunkedIOHandler defaults
chunked_io_chunk_size: 100000
chunked_io_pool_size: 2
chunked_io_debug: False

# csv list of task families that inherit from ChunkedReaderMixin and whose output arrays should be
# checked (raising an exception) for non-finite values before saving them to disk
check_finite_output: cf.CalibrateEvents, cf.SelectEvents, cf.ProduceColumns

# csv list of task families that inherit from ChunkedReaderMixin and whose input columns should be
# checked (raising an exception) for overlaps between fields when created a merged input array
check_overlapping_inputs: None

# whether to log runtimes of array functions by default
log_array_function_runtime: False


[outputs]

# list of all used file systems
wlcg_file_systems: wlcg_fs, wlcg_fs_infn_redirector, wlcg_fs_global_redirector

# list of file systems used by columnflow.tasks.external.GetDatasetLFNs.iter_nano_files to
# look for the correct fs per nano input file (in that order)
lfn_sources: wlcg_fs_infn_redirector, wlcg_fs_global_redirector

# output locations per task family
# for local targets : "local[, LOCAL_FS_NAME or STORE_PATH]"
# for remote targets: "wlcg[, WLCG_FS_NAME]"
# (when WLCG_FS_NAME is empty, the tasks' "default_wlcg_fs" attribute is used)
# examples:
# cf.CalibrateEvents: local
# cf.SelectEvents: wlcg
# cf.CalibrateEvents: wlcg, wlcg_fs_desy


[job]

job_file_dir: $CF_JOB_BASE
job_file_dir_cleanup: False


[local_fs]

base: /


[wlcg_fs]

# set this to your desired location
base: root://eosuser.cern.ch/eos/user/$CF_CERN_USER_FIRSTCHAR/$CF_CERN_USER/$CF_STORE_NAME
create_file_dir: True
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 50GB


[wlcg_fs_desy]

base: &::webdav_base
webdav_base: davs://dcache-cms-webdav-wan.desy.de:2880/pnfs/desy.de/cms/tier2/store/user/$CF_CERN_USER/$CF_STORE_NAME
gsiftp_base: gsiftp://dcache-door-cms04.desy.de:2811/pnfs/desy.de/cms/tier2/store/user/$CF_CERN_USER/$CF_STORE_NAME
xrootd_base: root://dcache-cms-xrootd.desy.de:1094/pnfs/desy.de/cms/tier2/store/user/$CF_CERN_USER/$CF_STORE_NAME
create_file_dir: True
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 50GB


[wlcg_fs_unl]

base: https://xrootd-local.unl.edu:1094/
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 25GB
